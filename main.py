import numpy as np
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans

# Base de dados (Nome, Ataque, Velocidade, Defesa, N√≠vel de Poder)
robos = np.array([
    ["TitanX", 85, 70, 90, 82.5], ["ShadowCore", 75, 90, 60, 76.5], ["MechaRex", 90, 50, 85, 78.5],  
    ["NitroBot", 65, 95, 55, 70.5], ["IronClaw", 80, 60, 88, 78.4], ["NeonStriker", 88, 77, 69, 79.4],  
    ["SteelPhantom", 50, 80, 40, 58.0], ["Rusty", 40, 45, 35, 40.0], ["BlazeUnit", 95, 85, 80, 89.5],  
    ["OmegaKnight", 92, 70, 92, 85.8], ["CyberCrusher", 89, 65, 86, 81.0], ["TurboBot", 55, 99, 45, 64.5],  
    ["TitanZero", 78, 82, 74, 76.8], ["MechaFury", 85, 72, 79, 81.2], ["ElectroSting", 60, 85, 50, 66.0],  
    ["WarDroid", 95, 60, 90, 86.2],  
    ["ShadowGhost", 58, 87, 43, 63.5],  
    ["BladeCore", 80, 70, 85, 78.6],  
    ["VenomBot", 72, 68, 65, 69.5],  
    ["InfernoMech", 88, 90, 85, 86.0],  
    ["StealthUnit", 65, 92, 48, 69.8],  
    ["PlasmaKnight", 84, 73, 79, 78.9],  
    ["TitanBuster", 91, 65, 87, 82.0],  
    ["CyberSentinel", 76, 80, 72, 74.8],  
    ["RoboSpectre", 67, 77, 60, 69.2],  
    ["StormBreaker", 89, 81, 83, 83.5],  
    ["TeraCrusher", 90, 62, 91, 81.9],  
    ["SteelVortex", 50, 78, 40, 57.5],  
    ["NanoBot", 45, 40, 38, 39.0],  
    ["GigaTitan", 97, 88, 95, 92.0]  
])

# T√≠tulo da p√°gina
st.set_page_config(page_title="ü§ñ SteelFight", layout="centered")

# Descri√ß√£o do projeto
st.title("ü§ñ Bem-vindo a Arena SteelFight!")
st.write(
    """  
    ü§ñ Bem-vindo a Arena SteelFight!
    """
)

# Separando as vari√°veis
X = robos[:, 1:4].astype(float)  # Pegando Ataque, Velocidade e Defesa
Y = robos[:, 4].astype(float)    # Pegando N√≠vel de Poder

# Criando e treinando o modelo de regress√£o linear
modelo = LinearRegression()
modelo.fit(X, Y)

# Obtendo coeficientes
a1, a2, a3 = modelo.coef_
b = modelo.intercept_

# Criando as abas
aba1, aba2, aba3 = st.tabs(["Regras", "Oficina", "üîç **Lista de rob√¥s**"])

# Aba  Base de dados ultilizada
with aba3:
    df = pd.DataFrame(robos, columns=["Nome", "Ataque", "Velocidade", "Defesa", "N√≠vel de Poder"])
    st.dataframe(df)


# Aba Modelo Supervisionado
with aba1:
    # Exibindo os resultados
    st.title("Modelo de Regress√£o Linear")
    st.write(
    """
        A Regress√£o Linear M√∫ltipla √© usada quando queremos prever um valor com base em m√∫ltiplas vari√°veis independentes. No nosso caso:

        **Vari√°veis Independentes (X):**
    """
    )
    st.write("üîπ x‚ÇÅ = Ataque üí™")
    st.write("üîπ x‚ÇÇ = Velocidade ‚ö°")
    st.write("üîπ x‚ÇÉ = Defesa üõ°Ô∏è")

    st.write(
    """
        **Vari√°vel Dependente (Y):**

        üîπ y = N√≠vel de Poder
    """
    )
    st.write("A equa√ß√£o da regress√£o linear m√∫ltipla √©:")
    st.latex(r"y = a_1 \cdot x_1 + a_2 \cdot x_2 + a_3 \cdot x_3 + b")
    st.write(
        """
        Onde:

        *a‚ÇÅ*, *a‚ÇÇ*, *a‚ÇÉ* s√£o os coeficientes que determinam a influ√™ncia de cada vari√°vel no resultado.     
        *b* √© o intercepto, ou seja, o valor inicial quando todas as vari√°veis independentes s√£o zero.
        """
    )

    st.write(
        """
        üìä **An√°lise dos Coeficientes da Regress√£o Linear**  

        Ap√≥s treinar o modelo de regress√£o linear com nossa base de dados dos rob√¥s, chegamos aos seguintes resultados:  
        """
    )
    st.write(f"üîπ **Coeficiente de Ataque (a1):** {a1:.4f}")
    st.write(f"üîπ **Coeficiente de Velocidade (a2):** {a2:.4f}")
    st.write(f"üîπ **Coeficiente de Defesa (a3):** {a3:.4f}")
    st.write(f"üîπ **Intercepto (b):** {b:.4f}")
    
    st.write("Cada coeficiente mostra **o impacto de cada atributo** (Ataque, Velocidade e Defesa) no n√≠vel de poder do rob√¥:")
    st.write(f"üîπ Para cada **+1 ponto em Ataque**, o n√≠vel de poder aumenta **{a1:.2f} pontos**.")
    st.write(f"üîπ Para cada **+1 ponto em Velocidade**, o n√≠vel de poder aumenta **{a2:.2f} pontos**.")
    st.write(f"üîπ Para cada **+1 ponto em Defesa**, o n√≠vel de poder aumenta **{a3:.2f} pontos**.")
    st.write(f"üîπ O valor base do n√≠vel de poder (quando todos os atributos s√£o 0) √© **{b:.2f}**.")
    
    st.write("A equa√ß√£o final que representa nosso modelo √©:")
    st.latex(rf"y = {a1:.4f} \cdot x_1 + {a2:.4f} \cdot x_2 + {a3:.4f} \cdot x_3 + {b:.4f}")


    ##### Criando um novo rob√¥ para prever n√≠vel de poder
    novo_robo = np.array([[80, 85, 75]])
    nivel_predito = modelo.predict(novo_robo)

    st.write(f"Se criarmos um novo robo com ***Ataque = 80***, ***Velocidade = 85*** e ***Defesa = 75*** o n√≠vel de poder previsto para esse rob√¥ √© **{nivel_predito[0]:.2f}**.")

    # Valores do rob√¥ de exemplo
    ataque_exemplo = 80
    velocidade_exemplo = 85
    defesa_exemplo = 75

    # C√°lculo manual
    nivel_calculado = (a1 * ataque_exemplo) + (a2 * velocidade_exemplo) + (a3 * defesa_exemplo) + b

    # C√°lculos passo a passo
    st.latex(rf"""
    y = {a1:.2f} \cdot {ataque_exemplo} + {a2:.2f} \cdot {velocidade_exemplo} + {a3:.2f} \cdot {defesa_exemplo} + {b:.2f}
    """)

    st.latex(rf"""
    y = {a1 * ataque_exemplo:.2f} + {a2 * velocidade_exemplo:.2f} + {a3 * defesa_exemplo:.2f} + {b:.2f}
    """)

    st.latex(rf"""
    y = {nivel_calculado:.2f}
    """)


with aba2:
    df = pd.DataFrame(robos, columns=["Nome", "Ataque", "Velocidade", "Defesa", "N√≠vel de Poder"])
    st.dataframe(df)
